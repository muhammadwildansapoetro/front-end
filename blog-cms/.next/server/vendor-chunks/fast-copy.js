"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-copy";
exports.ids = ["vendor-chunks/fast-copy"];
exports.modules = {

/***/ "(rsc)/./node_modules/fast-copy/dist/fast-copy.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/fast-copy/dist/fast-copy.esm.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ copy)\n/* harmony export */ });\nvar toStringFunction = Function.prototype.toString;\nvar create = Object.create, defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols, getPrototypeOf$1 = Object.getPrototypeOf;\nvar _a = Object.prototype, hasOwnProperty = _a.hasOwnProperty, propertyIsEnumerable = _a.propertyIsEnumerable;\nvar SYMBOL_PROPERTIES = typeof getOwnPropertySymbols === 'function';\nvar WEAK_MAP = typeof WeakMap === 'function';\n/**\n * @function createCache\n *\n * @description\n * get a new cache object to prevent circular references\n *\n * @returns the new cache object\n */\nvar createCache = (function () {\n    if (WEAK_MAP) {\n        return function () { return new WeakMap(); };\n    }\n    var Cache = /** @class */ (function () {\n        function Cache() {\n            this._keys = [];\n            this._values = [];\n        }\n        Cache.prototype.has = function (key) {\n            return !!~this._keys.indexOf(key);\n        };\n        Cache.prototype.get = function (key) {\n            return this._values[this._keys.indexOf(key)];\n        };\n        Cache.prototype.set = function (key, value) {\n            this._keys.push(key);\n            this._values.push(value);\n        };\n        return Cache;\n    }());\n    return function () { return new Cache(); };\n})();\n/**\n * @function getCleanClone\n *\n * @description\n * get an empty version of the object with the same prototype it has\n *\n * @param object the object to build a clean clone from\n * @param realm the realm the object resides in\n * @returns the empty cloned object\n */\nvar getCleanClone = function (object, realm) {\n    var prototype = object.__proto__ || getPrototypeOf$1(object);\n    if (!prototype) {\n        return create(null);\n    }\n    var Constructor = prototype.constructor;\n    if (Constructor === realm.Object) {\n        return prototype === realm.Object.prototype ? {} : create(prototype);\n    }\n    if (~toStringFunction.call(Constructor).indexOf('[native code]')) {\n        try {\n            return new Constructor();\n        }\n        catch (_a) { }\n    }\n    return create(prototype);\n};\n/**\n * @function getObjectCloneLoose\n *\n * @description\n * get a copy of the object based on loose rules, meaning all enumerable keys\n * and symbols are copied, but property descriptors are not considered\n *\n * @param object the object to clone\n * @param realm the realm the object resides in\n * @param handleCopy the function that handles copying the object\n * @returns the copied object\n */\nvar getObjectCloneLoose = function (object, realm, handleCopy, cache) {\n    var clone = getCleanClone(object, realm);\n    // set in the cache immediately to be able to reuse the object recursively\n    cache.set(object, clone);\n    for (var key in object) {\n        if (hasOwnProperty.call(object, key)) {\n            clone[key] = handleCopy(object[key], cache);\n        }\n    }\n    if (SYMBOL_PROPERTIES) {\n        var symbols = getOwnPropertySymbols(object);\n        for (var index = 0, length_1 = symbols.length, symbol = void 0; index < length_1; ++index) {\n            symbol = symbols[index];\n            if (propertyIsEnumerable.call(object, symbol)) {\n                clone[symbol] = handleCopy(object[symbol], cache);\n            }\n        }\n    }\n    return clone;\n};\n/**\n * @function getObjectCloneStrict\n *\n * @description\n * get a copy of the object based on strict rules, meaning all keys and symbols\n * are copied based on the original property descriptors\n *\n * @param object the object to clone\n * @param realm the realm the object resides in\n * @param handleCopy the function that handles copying the object\n * @returns the copied object\n */\nvar getObjectCloneStrict = function (object, realm, handleCopy, cache) {\n    var clone = getCleanClone(object, realm);\n    // set in the cache immediately to be able to reuse the object recursively\n    cache.set(object, clone);\n    var properties = SYMBOL_PROPERTIES\n        ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object))\n        : getOwnPropertyNames(object);\n    for (var index = 0, length_2 = properties.length, property = void 0, descriptor = void 0; index < length_2; ++index) {\n        property = properties[index];\n        if (property !== 'callee' && property !== 'caller') {\n            descriptor = getOwnPropertyDescriptor(object, property);\n            if (descriptor) {\n                // Only clone the value if actually a value, not a getter / setter.\n                if (!descriptor.get && !descriptor.set) {\n                    descriptor.value = handleCopy(object[property], cache);\n                }\n                try {\n                    defineProperty(clone, property, descriptor);\n                }\n                catch (error) {\n                    // Tee above can fail on node in edge cases, so fall back to the loose assignment.\n                    clone[property] = descriptor.value;\n                }\n            }\n            else {\n                // In extra edge cases where the property descriptor cannot be retrived, fall back to\n                // the loose assignment.\n                clone[property] = handleCopy(object[property], cache);\n            }\n        }\n    }\n    return clone;\n};\n/**\n * @function getRegExpFlags\n *\n * @description\n * get the flags to apply to the copied regexp\n *\n * @param regExp the regexp to get the flags of\n * @returns the flags for the regexp\n */\nvar getRegExpFlags = function (regExp) {\n    var flags = '';\n    if (regExp.global) {\n        flags += 'g';\n    }\n    if (regExp.ignoreCase) {\n        flags += 'i';\n    }\n    if (regExp.multiline) {\n        flags += 'm';\n    }\n    if (regExp.unicode) {\n        flags += 'u';\n    }\n    if (regExp.sticky) {\n        flags += 'y';\n    }\n    return flags;\n};\n\n// utils\nvar isArray = Array.isArray;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar GLOBAL_THIS = (function () {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (console && console.error) {\n        console.error('Unable to locate global object, returning \"this\".');\n    }\n    return this;\n})();\n/**\n * @function copy\n *\n * @description\n * copy an value deeply as much as possible\n *\n * If `strict` is applied, then all properties (including non-enumerable ones)\n * are copied with their original property descriptors on both objects and arrays.\n *\n * The value is compared to the global constructors in the `realm` provided,\n * and the native constructor is always used to ensure that extensions of native\n * objects (allows in ES2015+) are maintained.\n *\n * @param value the value to copy\n * @param [options] the options for copying with\n * @param [options.isStrict] should the copy be strict\n * @param [options.realm] the realm (this) value the value is copied from\n * @returns the copied value\n */\nfunction copy(value, options) {\n    // manually coalesced instead of default parameters for performance\n    var isStrict = !!(options && options.isStrict);\n    var realm = (options && options.realm) || GLOBAL_THIS;\n    var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;\n    /**\n     * @function handleCopy\n     *\n     * @description\n     * copy the value recursively based on its type\n     *\n     * @param value the value to copy\n     * @returns the copied value\n     */\n    var handleCopy = function (value, cache) {\n        if (!value || typeof value !== 'object') {\n            return value;\n        }\n        if (cache.has(value)) {\n            return cache.get(value);\n        }\n        var prototype = value.__proto__ || getPrototypeOf(value);\n        var Constructor = prototype && prototype.constructor;\n        // plain objects\n        if (!Constructor || Constructor === realm.Object) {\n            return getObjectClone(value, realm, handleCopy, cache);\n        }\n        var clone;\n        // arrays\n        if (isArray(value)) {\n            // if strict, include non-standard properties\n            if (isStrict) {\n                return getObjectCloneStrict(value, realm, handleCopy, cache);\n            }\n            clone = new Constructor();\n            cache.set(value, clone);\n            for (var index = 0, length_1 = value.length; index < length_1; ++index) {\n                clone[index] = handleCopy(value[index], cache);\n            }\n            return clone;\n        }\n        // dates\n        if (value instanceof realm.Date) {\n            return new Constructor(value.getTime());\n        }\n        // regexps\n        if (value instanceof realm.RegExp) {\n            clone = new Constructor(value.source, value.flags || getRegExpFlags(value));\n            clone.lastIndex = value.lastIndex;\n            return clone;\n        }\n        // maps\n        if (realm.Map && value instanceof realm.Map) {\n            clone = new Constructor();\n            cache.set(value, clone);\n            value.forEach(function (value, key) {\n                clone.set(key, handleCopy(value, cache));\n            });\n            return clone;\n        }\n        // sets\n        if (realm.Set && value instanceof realm.Set) {\n            clone = new Constructor();\n            cache.set(value, clone);\n            value.forEach(function (value) {\n                clone.add(handleCopy(value, cache));\n            });\n            return clone;\n        }\n        // blobs\n        if (realm.Blob && value instanceof realm.Blob) {\n            return value.slice(0, value.size, value.type);\n        }\n        // buffers (node-only)\n        if (realm.Buffer && realm.Buffer.isBuffer(value)) {\n            clone = realm.Buffer.allocUnsafe\n                ? realm.Buffer.allocUnsafe(value.length)\n                : new Constructor(value.length);\n            cache.set(value, clone);\n            value.copy(clone);\n            return clone;\n        }\n        // arraybuffers / dataviews\n        if (realm.ArrayBuffer) {\n            // dataviews\n            if (realm.ArrayBuffer.isView(value)) {\n                clone = new Constructor(value.buffer.slice(0));\n                cache.set(value, clone);\n                return clone;\n            }\n            // arraybuffers\n            if (value instanceof realm.ArrayBuffer) {\n                clone = value.slice(0);\n                cache.set(value, clone);\n                return clone;\n            }\n        }\n        // if the value cannot / should not be cloned, don't\n        if (\n        // promise-like\n        typeof value.then === 'function' ||\n            // errors\n            value instanceof Error ||\n            // weakmaps\n            (realm.WeakMap && value instanceof realm.WeakMap) ||\n            // weaksets\n            (realm.WeakSet && value instanceof realm.WeakSet)) {\n            return value;\n        }\n        // assume anything left is a custom constructor\n        return getObjectClone(value, realm, handleCopy, cache);\n    };\n    return handleCopy(value, createCache());\n}\n// Adding reference to allow usage in CommonJS libraries compiled using TSC, which\n// expects there to be a default property on the exported value. See\n// [#37](https://github.com/planttheidea/fast-copy/issues/37) for details.\ncopy.default = copy;\n/**\n * @function strictCopy\n *\n * @description\n * copy the value with `strict` option pre-applied\n *\n * @param value the value to copy\n * @param [options] the options for copying with\n * @param [options.realm] the realm (this) value the value is copied from\n * @returns the copied value\n */\ncopy.strict = function strictCopy(value, options) {\n    return copy(value, {\n        isStrict: true,\n        realm: options ? options.realm : void 0,\n    });\n};\n\n\n//# sourceMappingURL=fast-copy.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fast-copy/dist/fast-copy.esm.js\n");

/***/ })

};
;